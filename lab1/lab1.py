ROAD_LEN = 109
def task1(v: float, t: int) -> float:
    return v * t % ROAD_LEN

# В некоторой школе решили набрать три новых математических класса и оборудовать кабинеты для них новыми партами. За каждой партой может сидеть два учащихся. Известно количество учащихся в каждом из трех классов. Выведите наименьшее число парт, которое нужно приобрести для них.

# Программа получает на вход три натуральных числа: количество учащихся в каждом из трех классов.

def task2(class1: int, class2: int, class3: int) -> int:
    return class1//2 + class1 % 2 + class2//2 + class2 % 2 + class3//2 + class3 % 2


# За день машина проезжает n километров. Сколько дней нужно, чтобы проехать маршрут длиной m километров?

def task3(n: int, m: int) -> int:
    return m // n + (m % n != 0)


# n человек разбили на m команд так, что в каждой команде есть хотя бы один человек. Все члены каждой команды обменялись рукопожатиями. Посчитайте минимальное и максимальное число возможных рукопожатий.

# Программа получает на вход целые числа n(m % n != 0) и m, 1≤m≤n≤100, каждое в отдельной строке, и должна вывести два числа — минимальное и максимальное число рукопожатий.

# def task4(n: int, m: int) -> tuple:
    # HZ
    

# n школьников делят k яблок «почти поровну», то есть так, чтобы количество яблок, доставшихся любым двум школьникам, отличалось бы не более, чем на 1. Программа получает на вход натуральное число n и целое неотрицательное число k, каждое в отдельной строке, и должна вывести количество школьников, которым достанется яблок меньше, чем некоторым из их товарищей.

def task5(n: int, k: int) -> int:
    return n-k % n


# Дано целое число n. Выведите следующее за ним чётное число.
def task6(n: int) -> int:
    return n + 2 - n % 2

# Бригада скорой помощи выехала по вызову в один из отделенных районов. К сожалению, когда диспетчер получил вызов, он успел записать только адрес дома и номер квартиры K1, а затем связь прервалась. Однако он вспомнил, что по этому же адресу дома некоторое время назад скорая помощь выезжала в квартиру K2, которая расположена в подъезде P2 на этаже N2. Известно, что в доме M этажей и количество квартир на каждой лестничной площадке одинаково. Напишите программу, которая вычисляет номер подъезда P1 и номер этажа N1 квартиры K1.

# Программа получает на вход пять положительных целых чисел K1, M, K2, P2, N2. Все числа не превосходят 1000.
# Выведите два числа P1 и N1. Если входные данные не позволяют однозначно определить P1 или N1, вместо соответствующего числа напечатайте 0. Если входные данные противоречивы, напечатайте два числа –1 (минус один).
# def task8(k1: int, k2: int, p2: int, n2: int, m: int) -> tuple: 
    
    
# Сколько разрезов нужно сделать, чтобы разрезать круглый торт на N одинаковых по форме и размеру кусков?
def task9(n: int) -> int:
    if n <= 1:
        return 0
    if n %2 == 0:
        return n // 2
    else:
        return n

# Яша плавал в бассейне размером N×M× метров и устал. В этот момент он обнаружил, что находится на расстоянии x метров от одного из длинных бортиков (не обязательно от ближайшего) и y метров от одного из коротких бортиков. Какое минимальное расстояние должен проплыть Яша, чтобы выбраться из бассейна на бортик? Обратите внимание, что изначально неизвестно, какой из бортиков (длиной N или M метров) является коротким.

def task10(n: int, m: int, x: int, y: int) -> int: 
    return min(x, y, n-x, m-y)